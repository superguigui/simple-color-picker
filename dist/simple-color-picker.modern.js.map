{"version":3,"file":"simple-color-picker.modern.js","sources":["../src/types.ts","../src/utils.ts","../src/color.ts","../src/index.ts","../src/ColorPicker.ts"],"sourcesContent":["export function isString(str: any): boolean {\n  return typeof str === 'string'\n}\n\nexport function isNumber(num: any): boolean {\n  return typeof num === 'number' && !isNaN(num)\n}\n","export function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n\nexport type Position = {\n  x: number\n  y: number\n}\n\nexport function getMousePosition(e: MouseEvent | TouchEvent): Position {\n  if (e.type.indexOf('touch') === 0) {\n    const touch = (e as TouchEvent).touches[0]\n    return { x: touch.clientX, y: touch.clientY }\n  }\n  const mouse = e as MouseEvent\n  return { x: mouse.clientX, y: mouse.clientY }\n}\n\nexport function pad2(c: string): string {\n  return c.length == 1 ? '0' + c : '' + c\n}","import { isNumber } from './types'\nimport { pad2 } from './utils'\n\n// Each member has a range of 0-1\\\nexport type RGBAColor = {\n  r: number\n  g: number\n  b: number\n  a?: number\n}\n\n// Each member has a range of 0-1\nexport type HSVAColor = {\n  h: number\n  s: number\n  v: number\n  a?: number\n}\n\nexport class Color {\n  private _rgba: RGBAColor = { r: 0, g: 0, b: 0, a: 1 }\n  private _hsva: HSVAColor = { h: 0, s: 0, v: 0, a: 1 }\n  private _hexNumber: number\n  private _brightness: number\n  private _hexString: string\n  private _isDark: boolean\n  private _isLight: boolean\n\n  constructor(color: number | string) {\n    this.fromHex(color)\n  }\n\n  public fromHex(color: number | string): void {\n    if (!color) color = 0\n\n    if (isNumber(color)) {\n      this._hexNumber = color as number\n      this._hexString = numberToHexString(this._hexNumber)\n    } else {\n      this._hexString = (color as string).toUpperCase()\n      this._hexNumber = hexStringToNumber(this._hexString)\n    }\n    const { r, g, b } = hexNumberToRgb(this._hexNumber)\n\n    this._rgba.r = r\n    this._rgba.g = g\n    this._rgba.b = b\n\n    const { h, s, v } = rgbToHsv(this._rgba)\n\n    this._hsva.h = h\n    this._hsva.s = s\n    this._hsva.v = v\n\n    this._updateBrightness()\n  }\n\n  public fromHsv(color: HSVAColor): void {\n    const { h, s, v } = color\n\n    this._hsva.h = h\n    this._hsva.s = s\n    this._hsva.v = v\n\n    const { r, g, b } = hsvToRgb(this._hsva)\n\n    this._rgba.r = r\n    this._rgba.g = g\n    this._rgba.b = b\n\n    this._hexString = rgbToHex(this._rgba)\n    this._hexNumber = hexStringToNumber(this._hexString)\n\n    this._updateBrightness()\n  }\n\n  private _updateBrightness(): void {\n    const { r, g, b } = this._rgba\n    this._brightness = (r * 299 + g * 587 + b * 114) / 1000\n    this._isDark = this._brightness < 0.5\n    this._isLight = !this._isDark\n  }\n\n  get rgb(): RGBAColor {\n    return this._rgba\n  }\n\n  get hsv(): HSVAColor {\n    return this._hsva\n  }\n\n  get hex(): number {\n    return this._hexNumber\n  }\n\n  get hexString(): string {\n    return this._hexString\n  }\n\n  get brightness(): number {\n    return this._brightness\n  }\n\n  get isDark(): boolean {\n    return this._isDark\n  }\n\n  get isLight(): boolean {\n    return this._isLight\n  }\n}\n\nexport function hexNumberToRgb(color: number): RGBAColor {\n  const r = ((color >> 16) & 255) / 255\n  const g = ((color >> 8) & 255) / 255\n  const b = (color & 255) / 255\n  return { r, g, b }\n}\n\nexport function rgbToHex(color: RGBAColor): string {\n  const { r, g, b } = color\n  var hex = [\n    '#',\n    pad2(Math.round(r * 255).toString(16)),\n    pad2(Math.round(g * 255).toString(16)),\n    pad2(Math.round(b * 255).toString(16))\n  ]\n\n  return hex.join('').toUpperCase()\n}\n\nexport function numberToHexString(color: number): string {\n  return '#' + ('00000' + (color | 0).toString(16)).substr(-6).toUpperCase()\n}\n\nexport function hexStringToNumber(color: string): number {\n  return parseInt(color.replace('#', ''), 16)\n}\n\nexport function hsvToRgb(color: HSVAColor): RGBAColor {\n  let { h, s, v } = color\n  h *= 6\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return { r, g, b }\n}\n\nexport function rgbToHsv(color: RGBAColor): HSVAColor {\n  const { r, g, b } = color\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n  const v = max\n\n  let h\n\n  if (max == min) {\n    h = 0\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n  return { h, s, v }\n}\n","export { ColorPicker as default } from './ColorPicker'\nimport css from './styles.styl'\nimport { insertCss } from 'insert-css'\ninsertCss(css)\n","import { Color, RGBAColor, HSVAColor } from './color'\nimport { isNumber, isString } from './types'\nimport { clamp, Position, getMousePosition } from './utils'\n\ntype ColorPickerOptions = {\n  window?: Window\n  el?: HTMLElement | string\n  background?: string | number\n  widthUnits?: string\n  heightUnits?: string\n  width?: number\n  height?: number\n  color?: string | number\n}\n\nexport class ColorPicker {\n  private _window: Window\n  private _document: Document\n  private _widthUnits: string = 'px'\n  private _heightUnits: string = 'px'\n  private _huePosition: number = 0\n  private _hueHeight: number = 0\n  private _maxHue: number = 0\n  public _inputIsNumber: boolean = false\n  private _saturationWidth: number = 0\n  private _isChoosing: boolean = false\n  private _callbacks: Function[] = []\n\n  public width: number = 0\n  public height: number = 0\n  public hue: number = 0\n  public position: Position = { x: 0, y: 0 }\n  public color: Color = new Color(0)\n  public backgroundColor: Color = new Color(0)\n  public hueColor: Color = new Color(0)\n\n  public $el: HTMLElement\n  public $saturation: HTMLElement\n  public $hue: HTMLElement\n  public $sbSelector: HTMLElement\n  public $hSelector: HTMLElement\n\n  constructor(options: ColorPickerOptions = {}) {\n    // Register window and document references in case this is instantiated inside of an iframe\n    this._window = options.window || window\n    this._document = this._window.document\n\n    // Create DOM\n    this.$el = this._document.createElement('div')\n    this.$el.className = 'Scp'\n    this.$el.innerHTML = `\n      <div class=\"Scp-saturation\">\n        <div class=\"Scp-brightness\"></div>\n        <div class=\"Scp-sbSelector\"></div>\n      </div>\n      <div class=\"Scp-hue\">\n        <div class=\"Scp-hSelector\"></div>\n      </div>\n    `\n\n    // DOM accessors\n    this.$saturation = this.$el.querySelector('.Scp-saturation')\n    this.$hue = this.$el.querySelector('.Scp-hue')\n    this.$sbSelector = this.$el.querySelector('.Scp-sbSelector')\n    this.$hSelector = this.$el.querySelector('.Scp-hSelector')\n\n    // Event listeners\n    this.$saturation.addEventListener('mousedown', this._onSaturationMouseDown)\n    this.$saturation.addEventListener('touchstart', this._onSaturationMouseDown)\n    this.$hue.addEventListener('mousedown', this._onHueMouseDown)\n    this.$hue.addEventListener('touchstart', this._onHueMouseDown)\n\n    // Some styling and DOMing from options\n    if (options.el) {\n      this.appendTo(options.el)\n    }\n\n    if (options.background) {\n      this.setBackgroundColor(options.background)\n    }\n\n    if (options.widthUnits) {\n      this._widthUnits = options.widthUnits\n    }\n\n    if (options.heightUnits) {\n      this._heightUnits = options.heightUnits\n    }\n\n    this.setSize(options.width || 175, options.height || 150)\n    this.setColor(options.color)\n  }\n\n  /**\n   * Add the ColorPicker instance to a DOM element.\n   * @param  {HTMLElement} el\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public appendTo(el: HTMLElement | string): ColorPicker {\n    if (isString(el)) {\n      document.querySelector(el as string).appendChild(this.$el)\n    } else {\n      ;(el as HTMLElement).appendChild(this.$el)\n    }\n    return this\n  }\n\n  /**\n   * Removes picker from its parent and kill all listeners.\n   * Call this method for proper destroy.\n   */\n  public remove() {\n    this._callbacks = []\n\n    this._onSaturationMouseUp()\n    this._onHueMouseUp()\n\n    this.$saturation.removeEventListener(\n      'mousedown',\n      this._onSaturationMouseDown\n    )\n    this.$saturation.removeEventListener(\n      'touchstart',\n      this._onSaturationMouseDown\n    )\n    this.$hue.removeEventListener('mousedown', this._onHueMouseDown)\n    this.$hue.removeEventListener('touchstart', this._onHueMouseDown)\n\n    // this.off()\n\n    if (this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el)\n    }\n  }\n\n  /**\n   * Manually set the current color of the picker. This is the method\n   * used on instantiation to convert `color` option to actual color for\n   * the picker. Param can be a hexadecimal number or an hex String.\n   * @param {String|Number} color hex color desired\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public setColor(color: string | number): ColorPicker {\n    this._inputIsNumber = isNumber(color)\n    this.color.fromHex(color)\n\n    const { h, s, v } = this.color.hsv\n\n    if (!isNaN(h)) {\n      this.hue = h\n    }\n\n    this._moveSelectorTo(this._saturationWidth * s, (1 - v) * this._hueHeight)\n    this._moveHueTo((1 - this.hue) * this._hueHeight)\n\n    this._updateHue()\n    return this\n  }\n\n  /**\n   * Set size of the color picker for a given width and height. Note that\n   * a padding of 5px will be added if you chose to use the background option\n   * of the constructor.\n   * @param {Number} width\n   * @param {Number} height\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public setSize(width: number, height: number): ColorPicker {\n    this.width = width\n    this.height = height\n    this.$el.style.width = this.width + this._widthUnits\n    this.$el.style.height = this.height + this._heightUnits\n\n    this._saturationWidth = this.width - 25\n    this.$saturation.style.width = this._saturationWidth + 'px'\n\n    this._hueHeight = this.height\n    this._maxHue = this._hueHeight - 2\n\n    return this\n  }\n\n  /**\n   * Set the background color of the picker. It also adds a 5px padding\n   * for design purpose.\n   * @param {String|Number} color hex color desired for background\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public setBackgroundColor(color: string | number): ColorPicker {\n    this.backgroundColor.fromHex(color)\n    this.$el.style.padding = '5px'\n    this.$el.style.background = this.backgroundColor.hexString\n    return this\n  }\n\n  /**\n   * Removes background of the picker if previously set. It's no use\n   * calling this method if you didn't set the background option on start\n   * or if you didn't call setBackgroundColor previously.\n   */\n  public setNoBackground(): ColorPicker {\n    this.$el.style.padding = '0px'\n    this.$el.style.background = 'none'\n    return this\n  }\n\n  /**\n   * Registers callback to the update event of the picker.\n   * @param  {Function} callback\n   * @return {ColorPicker} Returns itself for chaining purpose\n   */\n  public onChange(callback: Function): ColorPicker {\n    if (this._callbacks.indexOf(callback) < 0) {\n      this._callbacks.push(callback)\n      callback(this.getHexString())\n    }\n    return this\n  }\n\n  /**\n   * Is true when mouse is down and user is currently choosing a color.\n   */\n  public get isChoosing(): boolean {\n    return this._isChoosing\n  }\n\n  /* =============================================================================\n    Color getters\n  ============================================================================= */\n  /**\n   * Main color getter, will return a formatted color string depending on input\n   * or a number depending on the last setColor call.\n   * @return {Number|String}\n   */\n  public getColor(): number | string {\n    if (this._inputIsNumber) {\n      return this.getHexNumber()\n    }\n    return this.getHexString()\n  }\n\n  /**\n   * Returns color as css hex string (ex: '#FF0000').\n   * @return {String}\n   */\n  public getHexString(): string {\n    return this.color.hexString.toUpperCase()\n  }\n\n  /**\n   * Returns color as number (ex: 0xFF0000).\n   * @return {Number}\n   */\n  public getHexNumber(): number {\n    return this.color.hex\n  }\n\n  /**\n   * Returns color as {r: 1, g: 0, b: 0} object.\n   * @return {Object}\n   */\n  public getRGB(): RGBAColor {\n    return this.color.rgb\n  }\n\n  /**\n   * Returns color as {h: 100, s: 1, v: 1} object.\n   * @return {Object}\n   */\n  public getHSV(): HSVAColor {\n    return this.color.hsv\n  }\n\n  /**\n   * Returns true if color is perceived as dark\n   * @return {Boolean}\n   */\n  public isDark(): boolean {\n    return this.color.isDark\n  }\n\n  /**\n   * Returns true if color is perceived as light\n   * @return {Boolean}\n   */\n  public isLight(): boolean {\n    return this.color.isLight\n  }\n\n  /* =============================================================================\n    Private methods\n  ============================================================================= */\n  private _moveSelectorTo(x: number, y: number): void {\n    this.position.x = clamp(x, 0, this._saturationWidth)\n    this.position.y = clamp(y, 0, this._hueHeight)\n\n    this.$sbSelector.style.transform = `translate(${this.position.x}px, ${this.position.y}px)`\n  }\n\n  private _updateColorFromPosition(): void {\n    this.color.fromHsv({\n      h: this.hue,\n      s: this.position.x / this._saturationWidth,\n      v: 1 - this.position.y / this._hueHeight\n    })\n    this._updateColor()\n  }\n\n  private _moveHueTo(y: number): void {\n    this._huePosition = clamp(y, 0, this._maxHue)\n    this.$hSelector.style.transform = `translateY(${this._huePosition}px)`\n  }\n\n  private _updateHueFromPosition(): void {\n    const hsvColor = this.getHSV()\n    this.hue = 1 - this._huePosition / this._maxHue\n    this.color.fromHsv({ h: this.hue, s: hsvColor.s, v: hsvColor.v })\n    this._updateHue()\n  }\n\n  private _updateHue(): void {\n    this.hueColor.fromHsv({ h: this.hue, s: 1, v: 1 })\n    this.$saturation.style.background = `linear-gradient(to right, #fff, ${this.hueColor.hexString})`\n    this._updateColor()\n  }\n\n  private _updateColor(): void {\n    this.$sbSelector.style.background = this.getHexString()\n    this.$sbSelector.style.borderColor = this.isDark() ? '#fff' : '#000'\n    this._triggerChange()\n  }\n\n  private _triggerChange(): void {\n    this._callbacks.forEach(callback => callback(this.getHexString()))\n  }\n\n  /* =============================================================================\n    Events handlers\n  ============================================================================= */\n  private _onSaturationMouseDown = (e: MouseEvent | TouchEvent): void => {\n    const sbOffset = this.$saturation.getBoundingClientRect()\n    const { x, y } = getMousePosition(e)\n    this._isChoosing = true\n    this._moveSelectorTo(x - sbOffset.left, y - sbOffset.top)\n    this._updateColorFromPosition()\n    this._window.addEventListener('mouseup', this._onSaturationMouseUp)\n    this._window.addEventListener('touchend', this._onSaturationMouseUp)\n    this._window.addEventListener('mousemove', this._onSaturationMouseMove)\n    this._window.addEventListener('touchmove', this._onSaturationMouseMove)\n    e.preventDefault()\n  }\n\n  private _onSaturationMouseMove = (e: MouseEvent | TouchEvent): void => {\n    const sbOffset = this.$saturation.getBoundingClientRect()\n    const { x, y } = getMousePosition(e)\n    this._moveSelectorTo(x - sbOffset.left, y - sbOffset.top)\n    this._updateColorFromPosition()\n  }\n\n  private _onSaturationMouseUp = () => {\n    this._isChoosing = false\n    this._window.removeEventListener('mouseup', this._onSaturationMouseUp)\n    this._window.removeEventListener('touchend', this._onSaturationMouseUp)\n    this._window.removeEventListener('mousemove', this._onSaturationMouseMove)\n    this._window.removeEventListener('touchmove', this._onSaturationMouseMove)\n  }\n\n  private _onHueMouseDown = (e: MouseEvent | TouchEvent): void => {\n    const hOffset = this.$hue.getBoundingClientRect()\n    const { y } = getMousePosition(e)\n    this._isChoosing = true\n    this._moveHueTo(y - hOffset.top)\n    this._updateHueFromPosition()\n    this._window.addEventListener('mouseup', this._onHueMouseUp)\n    this._window.addEventListener('touchend', this._onHueMouseUp)\n    this._window.addEventListener('mousemove', this._onHueMouseMove)\n    this._window.addEventListener('touchmove', this._onHueMouseMove)\n    e.preventDefault()\n  }\n\n  private _onHueMouseMove = e => {\n    const hOffset = this.$hue.getBoundingClientRect()\n    const { y } = getMousePosition(e)\n    this._moveHueTo(y - hOffset.top)\n    this._updateHueFromPosition()\n  }\n\n  private _onHueMouseUp = () => {\n    this._isChoosing = false\n    this._window.removeEventListener('mouseup', this._onHueMouseUp)\n    this._window.removeEventListener('touchend', this._onHueMouseUp)\n    this._window.removeEventListener('mousemove', this._onHueMouseMove)\n    this._window.removeEventListener('touchmove', this._onHueMouseMove)\n  }\n}\n"],"names":["isNumber","num","isNaN","clamp","value","min","max","Math","getMousePosition","e","type","indexOf","touch","touches","x","clientX","y","clientY","pad2","c","length","Color","constructor","color","this","r","g","b","a","h","s","v","fromHex","_hexNumber","_hexString","toString","substr","toUpperCase","numberToHexString","hexStringToNumber","hexNumberToRgb","_rgba","d","rgbToHsv","_hsva","_updateBrightness","fromHsv","i","floor","f","p","q","t","mod","hsvToRgb","round","join","rgbToHex","_brightness","_isDark","_isLight","rgb","hsv","hex","hexString","brightness","isDark","isLight","parseInt","replace","insertCss","options","sbOffset","$saturation","getBoundingClientRect","_isChoosing","_moveSelectorTo","left","top","_updateColorFromPosition","_window","addEventListener","_onSaturationMouseUp","_onSaturationMouseMove","preventDefault","removeEventListener","hOffset","$hue","_moveHueTo","_updateHueFromPosition","_onHueMouseUp","_onHueMouseMove","window","_document","document","$el","createElement","className","innerHTML","querySelector","$sbSelector","$hSelector","_onSaturationMouseDown","_onHueMouseDown","el","appendTo","background","setBackgroundColor","widthUnits","_widthUnits","heightUnits","_heightUnits","setSize","width","height","setColor","appendChild","remove","_callbacks","parentNode","removeChild","_inputIsNumber","hue","_saturationWidth","_hueHeight","_updateHue","style","_maxHue","backgroundColor","padding","setNoBackground","onChange","callback","push","getHexString","isChoosing","getColor","getHexNumber","getRGB","getHSV","position","transform","_updateColor","_huePosition","hsvColor","hueColor","borderColor","_triggerChange","forEach"],"mappings":"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"}